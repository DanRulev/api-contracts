// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gmembergrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GroupMemberServiceClient is the client API for GroupMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupMemberServiceClient interface {
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	GroupMember(ctx context.Context, in *GroupMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	GroupMembers(ctx context.Context, in *GroupMembersRequest, opts ...grpc.CallOption) (*GroupMembersResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMemberServiceClient(cc grpc.ClientConnInterface) GroupMemberServiceClient {
	return &groupMemberServiceClient{cc}
}

func (c *groupMemberServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/danRulev.group_member_grpc.GroupMemberService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/danRulev.group_member_grpc.GroupMemberService/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberServiceClient) GroupMember(ctx context.Context, in *GroupMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/danRulev.group_member_grpc.GroupMemberService/GroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberServiceClient) GroupMembers(ctx context.Context, in *GroupMembersRequest, opts ...grpc.CallOption) (*GroupMembersResponse, error) {
	out := new(GroupMembersResponse)
	err := c.cc.Invoke(ctx, "/danRulev.group_member_grpc.GroupMemberService/GroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/danRulev.group_member_grpc.GroupMemberService/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupMemberServiceServer is the server API for GroupMemberService service.
// All implementations must embed UnimplementedGroupMemberServiceServer
// for forward compatibility
type GroupMemberServiceServer interface {
	AddMember(context.Context, *AddMemberRequest) (*emptypb.Empty, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*MemberResponse, error)
	GroupMember(context.Context, *GroupMemberRequest) (*MemberResponse, error)
	GroupMembers(context.Context, *GroupMembersRequest) (*GroupMembersResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupMemberServiceServer()
}

// UnimplementedGroupMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupMemberServiceServer struct {
}

func (UnimplementedGroupMemberServiceServer) AddMember(context.Context, *AddMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedGroupMemberServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedGroupMemberServiceServer) GroupMember(context.Context, *GroupMemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMember not implemented")
}
func (UnimplementedGroupMemberServiceServer) GroupMembers(context.Context, *GroupMembersRequest) (*GroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMembers not implemented")
}
func (UnimplementedGroupMemberServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedGroupMemberServiceServer) mustEmbedUnimplementedGroupMemberServiceServer() {}

// UnsafeGroupMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupMemberServiceServer will
// result in compilation errors.
type UnsafeGroupMemberServiceServer interface {
	mustEmbedUnimplementedGroupMemberServiceServer()
}

func RegisterGroupMemberServiceServer(s *grpc.Server, srv GroupMemberServiceServer) {
	s.RegisterService(&_GroupMemberService_serviceDesc, srv)
}

func _GroupMemberService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/danRulev.group_member_grpc.GroupMemberService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/danRulev.group_member_grpc.GroupMemberService/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberService_GroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).GroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/danRulev.group_member_grpc.GroupMemberService/GroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).GroupMember(ctx, req.(*GroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberService_GroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).GroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/danRulev.group_member_grpc.GroupMemberService/GroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).GroupMembers(ctx, req.(*GroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/danRulev.group_member_grpc.GroupMemberService/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupMemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "danRulev.group_member_grpc.GroupMemberService",
	HandlerType: (*GroupMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _GroupMemberService_AddMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _GroupMemberService_UpdateMember_Handler,
		},
		{
			MethodName: "GroupMember",
			Handler:    _GroupMemberService_GroupMember_Handler,
		},
		{
			MethodName: "GroupMembers",
			Handler:    _GroupMemberService_GroupMembers_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _GroupMemberService_DeleteMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_member.proto",
}
